import java.nio.file.Files
import org.elasticsearch.gradle.testclusters.StandaloneRestIntegTestTask
import org.elasticsearch.gradle.test.SystemPropertyCommandLineArgumentProvider;
import org.gradle.api.tasks.Input;
import org.gradle.process.CommandLineArgumentProvider;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.Supplier;
import java.util.stream.Collectors;

buildscript {
  dependencies {
    classpath "org.elasticsearch.gradle:build-tools:${elasticsearchVersion}"
  }
}

plugins {
  // the old co.riiid.gradle is not gradle 7.0 compatible
  id "com.github.humblerookie.gradle" version "0.4.4"
  id "com.github.ben-manes.versions" version '0.36.0'
}

repositories {
  mavenCentral()
}

group = 'de.spinscale.elasticsearch.plugin'
version = "${elasticsearchVersion}.1-SNAPSHOT"

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'elasticsearch.esplugin'
apply plugin: 'elasticsearch.testclusters'

sourceCompatibility = '11'

esplugin {
  name = 'ingest-langdetect'
  description = 'Ingest processor doing language detection for fields'
  classname = 'org.elasticsearch.plugin.ingest.langdetect.IngestLangDetectPlugin'
  licenseFile = rootProject.file('LICENSE.txt')
  noticeFile = rootProject.file('NOTICE.txt')
}

// ignore javadoc warnings for now
tasks.withType(Javadoc) {
  options.addStringOption('Xdoclint:none', '-quiet')
}

githubRelease.doFirst {
  if (!System.getProperty('GITHUB_TOKEN', '')) {
    throw new Exception('Missing property GITHUB_TOKEN')
  }

  // check if zip file is there
  assert file("build/distributions/ingest-langdetect-${version}.zip").exists()

  // rename zip file
  def currentVersion = version.replace('-SNAPSHOT', '')
  def filename = "build/distributions/ingest-langdetect-${currentVersion}.zip"
  Files.copy(file("build/distributions/ingest-langdetect-${version}.zip").toPath(), file(filename).toPath())

  // configuration
  github {
    owner = 'spinscale'
    repo = 'elasticsearch-ingest-langdetect'
    token = System.getProperty('GITHUB_TOKEN')
    tagName = currentVersion
    assets = [ filename ]
    targetCommitish = 'main'
  }
}

// setup yaml rest tests
testClusters {
  yamlRestTest
}

sourceSets {
  yamlRestTest
}

configurations {
  yamlRestTestImplementation.extendsFrom testImplementation
  yamlRestTestRuntimeOnly.extendsFrom testRuntimeOnly
  restTestSpecs
}

tasks.register('copyRestTestSpecs', Copy) {
  from zipTree(configurations.restTestSpecs.singleFile)
  into "$buildDir/restResources/restspec"
}

TaskProvider<Zip> bundle = project.getTasks().withType(Zip.class).named("bundlePlugin");

// Register rest resources with source set
sourceSets.yamlRestTest.getOutput().dir("$buildDir/restResources/restspec");

tasks.register('yamlRestTest', StandaloneRestIntegTestTask) { testTask ->
    testTask.dependsOn(bundle, 'copyRestTestSpecs')

    def cluster = testClusters.yamlRestTest
    cluster.plugin(bundle.flatMap(AbstractArchiveTask::getArchiveFile))
    testTask.useCluster(testClusters.yamlRestTest)

    testTask.mustRunAfter(project.getTasks().named("test"))
    testTask.setTestClassesDirs(sourceSets.yamlRestTest.getOutput().getClassesDirs())
    testTask.setClasspath(sourceSets.yamlRestTest.getRuntimeClasspath())


    SystemPropertyCommandLineArgumentProvider nonInputProperties = new SystemPropertyCommandLineArgumentProvider()
    nonInputProperties.systemProperty("tests.rest.cluster", "${-> String.join(",", cluster.getAllHttpSocketURI())}")
    nonInputProperties.systemProperty("tests.cluster", "${-> String.join(",", cluster.getAllTransportPortURI())}")
    nonInputProperties.systemProperty("tests.clustername", "${-> cluster.getName()}")
    testTask.getJvmArgumentProviders().add(nonInputProperties)
    testTask.systemProperty("tests.rest.load_packaged", Boolean.FALSE.toString())
}

// this is a bit of a hack to make sure we run the test tests when releasing...
check.dependsOn 'yamlRestTest'

dependencies {
  implementation 'com.youcruit.com.cybozu.labs:langdetect:1.1.2-20151117'
  implementation 'net.arnx:jsonic:1.3.10'
  // the yaml tests require a log4j2 dependency, otherwise a dependency is thrown on startup
  runtimeOnly 'org.apache.logging.log4j:log4j-core:2.11.1'
  testImplementation "org.elasticsearch.test:framework:$elasticsearchVersion"
  restTestSpecs "org.elasticsearch:rest-api-spec:$elasticsearchVersion"
}


